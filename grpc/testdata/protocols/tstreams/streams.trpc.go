//
//
// Tencent is pleased to support the open source community by making tRPC available.
//
// Copyright (C) 2023 THL A29 Limited, a Tencent company.
// All rights reserved.
//
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the Apache 2.0 License,
// A copy of the Apache 2.0 License is included in this file.
//
//

// Code generated by trpc-go/trpc-go-cmdline v2.0.17. DO NOT EDIT.
// source: streams.proto

package streams

import (
	"context"
	"errors"
	"fmt"
	reflect "reflect"

	"trpc.group/trpc-go/trpc-codec/grpc"
	common "trpc.group/trpc-go/trpc-codec/grpc/testdata/protocols/common"
	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	"trpc.group/trpc-go/trpc-go/filter"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
	"trpc.group/trpc-go/trpc-go/stream"
)

// START ======================================= Server Service Definition ======================================= START

// GreeterService defines service
type GreeterService interface {
	Hello(ctx context.Context, req *common.HelloReq) (*common.HelloRsp, error)

	GetStream(*common.HelloReq, Greeter_GetStreamServer) error

	PutStream(Greeter_PutStreamServer) error

	AllStream(Greeter_AllStreamServer) error
}

func GreeterService_Hello_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &common.HelloReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(GreeterService).Hello(ctx, reqbody.(*common.HelloReq))
	}

	// get req from ctx
	grpcData := ctx.Value(grpc.ContextKeyHeader).(*grpc.Header)
	req = grpcData.Req.(*common.HelloReq)

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	// set rsp to ctx, and set rsp empty
	grpcData.Rsp = rsp
	rsp = &common.HelloRsp{}
	return rsp, nil
}

func GreeterService_GetStream_Handler(srv interface{}, stream server.Stream) error {
	m := new(common.HelloReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterService).GetStream(m, &greeterGetStreamServer{stream})
}

type Greeter_GetStreamServer interface {
	Send(*common.HelloRsp) error
	server.Stream
}

type greeterGetStreamServer struct {
	server.Stream
}

func (x *greeterGetStreamServer) Send(m *common.HelloRsp) error {
	return x.Stream.SendMsg(m)
}

func GreeterService_PutStream_Handler(srv interface{}, stream server.Stream) error {
	return srv.(GreeterService).PutStream(&greeterPutStreamServer{stream})
}

type Greeter_PutStreamServer interface {
	SendAndClose(*common.HelloRsp) error
	Recv() (*common.HelloReq, error)
	server.Stream
}

type greeterPutStreamServer struct {
	server.Stream
}

func (x *greeterPutStreamServer) SendAndClose(m *common.HelloRsp) error {
	return x.Stream.SendMsg(m)
}

func (x *greeterPutStreamServer) Recv() (*common.HelloReq, error) {
	m := new(common.HelloReq)
	if err := x.Stream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func GreeterService_AllStream_Handler(srv interface{}, stream server.Stream) error {
	return srv.(GreeterService).AllStream(&greeterAllStreamServer{stream})
}

type Greeter_AllStreamServer interface {
	Send(*common.HelloRsp) error
	Recv() (*common.HelloReq, error)
	server.Stream
}

type greeterAllStreamServer struct {
	server.Stream
}

func (x *greeterAllStreamServer) Send(m *common.HelloRsp) error {
	return x.Stream.SendMsg(m)
}

func (x *greeterAllStreamServer) Recv() (*common.HelloReq, error) {
	m := new(common.HelloReq)
	if err := x.Stream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer_ServiceDesc descriptor for server.RegisterService
var GreeterServer_ServiceDesc = server.ServiceDesc{
	ServiceName:  "trpc.app.server.Greeter",
	HandlerType:  ((*GreeterService)(nil)),
	StreamHandle: stream.NewStreamDispatcher(),
	Methods: []server.Method{
		{
			Name: "/trpc.app.server.Greeter/Hello",
			Func: GreeterService_Hello_Handler,
		},
	},
	Streams: []server.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       GreeterService_GetStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutStream",
			Handler:       GreeterService_PutStream_Handler,
			ServerStreams: false,
		},
		{
			StreamName:    "AllStream",
			Handler:       GreeterService_AllStream_Handler,
			ServerStreams: true,
		},
	},
}

// RegisterGreeterService register service
func RegisterGreeterService(s server.Service, svr GreeterService) {
	if err := s.Register(&GreeterServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Greeter register error:%v", err))
	}
	// register service to grpc
	if err := grpc.Register(GreeterServer_ServiceDesc.ServiceName,
		"streams.proto",
		[]grpc.RegisterMethodsInfo{
			{
				Method: server.Method{
					Name: "Hello",
					Func: GreeterService_Hello_Handler,
				},
				ReqType: reflect.TypeOf(common.HelloReq{}),
				RspType: reflect.TypeOf(common.HelloRsp{}),
			},
		}); err != nil {
		panic(fmt.Sprintf("grpc register Greeter error:%v", err))
	}
	if err := grpc.RegisterStream(GreeterServer_ServiceDesc.ServiceName,
		"streams.proto",
		GreeterServer_ServiceDesc.Streams,
		svr, (*GreeterService)(nil)); err != nil {
		panic(fmt.Sprintf("grpc register Greeter streams error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedGreeter struct{}

func (s *UnimplementedGreeter) Hello(ctx context.Context, req *common.HelloReq) (*common.HelloRsp, error) {
	return nil, errors.New("rpc Hello of service Greeter is not implemented")
}
func (s *UnimplementedGreeter) GetStream(req *common.HelloReq, stream Greeter_GetStreamServer) error {
	return errors.New("rpc GetStream of service Greeter is not implemented")
}
func (s *UnimplementedGreeter) PutStream(stream Greeter_PutStreamServer) error {
	return errors.New("rpc PutStream of service Greeter is not implemented")
}
func (s *UnimplementedGreeter) AllStream(stream Greeter_AllStreamServer) error {
	return errors.New("rpc AllStream of service Greeter is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// GreeterClientProxy defines service client proxy
type GreeterClientProxy interface {
	Hello(ctx context.Context, req *common.HelloReq, opts ...client.Option) (rsp *common.HelloRsp, err error)

	GetStream(ctx context.Context, req *common.HelloReq, opts ...client.Option) (Greeter_GetStreamClient, error)

	PutStream(ctx context.Context, opts ...client.Option) (Greeter_PutStreamClient, error)

	AllStream(ctx context.Context, opts ...client.Option) (Greeter_AllStreamClient, error)
}

type GreeterClientProxyImpl struct {
	client       client.Client
	streamClient stream.Client
	opts         []client.Option
}

var NewGreeterClientProxy = func(opts ...client.Option) GreeterClientProxy {
	return &GreeterClientProxyImpl{client: client.DefaultClient, streamClient: grpc.DefaultStreamClient, opts: opts}
}

func (c *GreeterClientProxyImpl) Hello(ctx context.Context, req *common.HelloReq, opts ...client.Option) (*common.HelloRsp, error) {
	// set req to ctx
	h := ctx.Value(grpc.ContextKeyHeader)
	var header *grpc.Header
	if h == nil {
		header = &grpc.Header{}
		ctx = context.WithValue(ctx, grpc.ContextKeyHeader, header)
	} else {
		var ok bool
		header, ok = h.(*grpc.Header)
		if !ok {
			return nil, errors.New(fmt.Sprintf("grpc header in context cannot be transfered to grpc.Header"))
		}
	}
	header.Req = req
	header.Rsp = &common.HelloRsp{}
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.app.server.Greeter/Hello")
	msg.WithCalleeServiceName(GreeterServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("app")
	msg.WithCalleeServer("server")
	msg.WithCalleeService("Greeter")
	msg.WithCalleeMethod("Hello")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &common.HelloRsp{}
	callopts = append(callopts, client.WithProtocol("grpc"))
	callopts = append(callopts, client.WithFilter(func(ctx context.Context, req1, rsp1 interface{}, next filter.ClientHandleFunc) error {
		err := next(ctx, req1, rsp1)
		header := ctx.Value(grpc.ContextKeyHeader).(*grpc.Header)
		*rsp = *header.Rsp.(*common.HelloRsp)
		return err
	}))
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *GreeterClientProxyImpl) GetStream(ctx context.Context, req *common.HelloReq, opts ...client.Option) (Greeter_GetStreamClient, error) {
	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName("/trpc.app.server.Greeter/GetStream")
	msg.WithCalleeServiceName(GreeterServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("app")
	msg.WithCalleeServer("server")
	msg.WithCalleeService("Greeter")
	msg.WithCalleeMethod("GetStream")
	msg.WithSerializationType(codec.SerializationTypePB)

	clientStreamDesc := &client.ClientStreamDesc{}
	clientStreamDesc.StreamName = "GetStream"
	clientStreamDesc.ClientStreams = false
	clientStreamDesc.ServerStreams = true

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	stream, err := c.streamClient.NewStream(ctx, clientStreamDesc, "/trpc.app.server.Greeter/GetStream", callopts...)
	if err != nil {
		return nil, err
	}
	x := &greeterGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(req); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_GetStreamClient interface {
	Recv() (*common.HelloRsp, error)
	client.ClientStream
}

type greeterGetStreamClient struct {
	client.ClientStream
}

func (x *greeterGetStreamClient) Recv() (*common.HelloRsp, error) {
	m := new(common.HelloRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *GreeterClientProxyImpl) PutStream(ctx context.Context, opts ...client.Option) (Greeter_PutStreamClient, error) {
	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName("/trpc.app.server.Greeter/PutStream")
	msg.WithCalleeServiceName(GreeterServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("app")
	msg.WithCalleeServer("server")
	msg.WithCalleeService("Greeter")
	msg.WithCalleeMethod("PutStream")
	msg.WithSerializationType(codec.SerializationTypePB)

	clientStreamDesc := &client.ClientStreamDesc{}
	clientStreamDesc.StreamName = "PutStream"
	clientStreamDesc.ClientStreams = true
	clientStreamDesc.ServerStreams = false

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	stream, err := c.streamClient.NewStream(ctx, clientStreamDesc, "/trpc.app.server.Greeter/PutStream", callopts...)
	if err != nil {
		return nil, err
	}
	x := &greeterPutStreamClient{stream}
	return x, nil
}

type Greeter_PutStreamClient interface {
	Send(*common.HelloReq) error
	CloseAndRecv() (*common.HelloRsp, error)
	client.ClientStream
}

type greeterPutStreamClient struct {
	client.ClientStream
}

func (x *greeterPutStreamClient) Send(m *common.HelloReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterPutStreamClient) CloseAndRecv() (*common.HelloRsp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(common.HelloRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *GreeterClientProxyImpl) AllStream(ctx context.Context, opts ...client.Option) (Greeter_AllStreamClient, error) {
	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName("/trpc.app.server.Greeter/AllStream")
	msg.WithCalleeServiceName(GreeterServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("app")
	msg.WithCalleeServer("server")
	msg.WithCalleeService("Greeter")
	msg.WithCalleeMethod("AllStream")
	msg.WithSerializationType(codec.SerializationTypePB)

	clientStreamDesc := &client.ClientStreamDesc{}
	clientStreamDesc.StreamName = "AllStream"
	clientStreamDesc.ClientStreams = true
	clientStreamDesc.ServerStreams = true

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	stream, err := c.streamClient.NewStream(ctx, clientStreamDesc, "/trpc.app.server.Greeter/AllStream", callopts...)
	if err != nil {
		return nil, err
	}
	x := &greeterAllStreamClient{stream}
	return x, nil
}

type Greeter_AllStreamClient interface {
	Send(*common.HelloReq) error
	Recv() (*common.HelloRsp, error)
	client.ClientStream
}

type greeterAllStreamClient struct {
	client.ClientStream
}

func (x *greeterAllStreamClient) Send(m *common.HelloReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterAllStreamClient) Recv() (*common.HelloRsp, error) {
	m := new(common.HelloRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// END ======================================= Client Service Definition ======================================= END
