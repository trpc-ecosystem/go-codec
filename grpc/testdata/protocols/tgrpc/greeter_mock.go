//
//
// Tencent is pleased to support the open source community by making tRPC available.
//
// Copyright (C) 2023 THL A29 Limited, a Tencent company.
// All rights reserved.
//
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the Apache 2.0 License,
// A copy of the Apache 2.0 License is included in this file.
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: greeter.trpc.go

// Package greeter is a generated GoMock package.
package greeter

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "trpc.group/trpc-go/trpc-codec/grpc/testdata/protocols/common"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockGreeterService is a mock of GreeterService interface.
type MockGreeterService struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterServiceMockRecorder
}

// MockGreeterServiceMockRecorder is the mock recorder for MockGreeterService.
type MockGreeterServiceMockRecorder struct {
	mock *MockGreeterService
}

// NewMockGreeterService creates a new mock instance.
func NewMockGreeterService(ctrl *gomock.Controller) *MockGreeterService {
	mock := &MockGreeterService{ctrl: ctrl}
	mock.recorder = &MockGreeterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreeterService) EXPECT() *MockGreeterServiceMockRecorder {
	return m.recorder
}

// Hello mocks base method.
func (m *MockGreeterService) Hello(ctx context.Context, req *common.HelloReq) (*common.HelloRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello", ctx, req)
	ret0, _ := ret[0].(*common.HelloRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello.
func (mr *MockGreeterServiceMockRecorder) Hello(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockGreeterService)(nil).Hello), ctx, req)
}

// MockGreeterClientProxy is a mock of GreeterClientProxy interface.
type MockGreeterClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterClientProxyMockRecorder
}

// MockGreeterClientProxyMockRecorder is the mock recorder for MockGreeterClientProxy.
type MockGreeterClientProxyMockRecorder struct {
	mock *MockGreeterClientProxy
}

// NewMockGreeterClientProxy creates a new mock instance.
func NewMockGreeterClientProxy(ctrl *gomock.Controller) *MockGreeterClientProxy {
	mock := &MockGreeterClientProxy{ctrl: ctrl}
	mock.recorder = &MockGreeterClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreeterClientProxy) EXPECT() *MockGreeterClientProxyMockRecorder {
	return m.recorder
}

// Hello mocks base method.
func (m *MockGreeterClientProxy) Hello(ctx context.Context, req *common.HelloReq, opts ...client.Option) (*common.HelloRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Hello", varargs...)
	ret0, _ := ret[0].(*common.HelloRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello.
func (mr *MockGreeterClientProxyMockRecorder) Hello(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockGreeterClientProxy)(nil).Hello), varargs...)
}
